<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JS基本概念]]></title>
    <url>%2F2017%2F07%2F16%2FFarBox%2Fsuni%2FJS%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[JS变量，函数，作用域和内存问题1.ECMAScript中没有函数签名的概念，因为其函数参数是以一个包含零或多个值的数组形式传递的。可以向ECMAScript传递任意数量的参数，并且可以通过arguments对象来访问这些参数。由于不存在函数签名的特性，ECMAScript函数不能重载。2.with语句的作用是将代码的作用域设置到一个特定的对象中。在with语句的代码块内部，每个变量首先被认为是一个局部变量，如果在局部环境中找不到该变量的定义，就会查询location对象中是否有同名属性。严格模式下不允许使用with语句3.函数定义时可以不指定是否返回值，因为任何ECMAScript函数都可以在任何时候返回任何值。实际上，未指定返回值的函数返回的是一个特殊的undefined值。4.基本类型在内存中占据固定大小的空间，因此被保存在栈内存中，从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本；引用变量的值是对象，保存在堆内存中，从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同一个对象。5.确定一个值是哪种基本类型可以使用typeof操作符，而确定一个值是哪种引用类型可以使用instanceof操作符。6.执行环境有全局执行环境和函数执行环境之分；每次进入一个新的执行环境，都会创建一个用于搜索变量和函数的作用域链。JS没有块级作用域。7.“标记清除”是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然后再回收其内存。另一个垃圾收集算法是“引用计数”，这种算法的思想是给当前不使用的值加上引用计数，当代码中存在循环引用现象时，引用计数算法就会导致问题。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[self introduce]]></title>
    <url>%2F2017%2F07%2F08%2FFarBox%2Fsuni%2Fself%20introduce%2F</url>
    <content type="text"><![CDATA[SuniI am a fool !!!]]></content>
  </entry>
</search>